mutate(Per = Events/Pop, upper = Per + se, lower = Per - se) %>%
mutate(Time = string)
}
# Cohort errorbars function
getCohort <- function(main.df){
library(metafor)
temp <- data.frame(Intervention = NA,
Time= NA,
Pop = NA,
Per = NA,
LB = NA,
UB = NA)
int <-  "IGlarLixi"
time <- 4
for(int in unique(main.df$Intervention)){
es <- main.df %>%
filter(Intervention == int) %>%
select(Intervention, `Group N`, n)
es.df <- escalc(measure="PLO",
xi=n,
ni= `Group N`,
data=es)
if(!is.na(es.df$n) & !is.na(es.df$`Group N`)) {
a <- rma(yi,
vi,
method='DL',
data=es.df,
level=95)
} else {
a = list(beta = NA, ci.lb = NA, ci.ub = NA)
a$beta = transf.logit(es$n/es$`Group N`)
}
tempPiece <-
data.frame(Intervention = int,
Time= time,
Pop = sum(es.df$Group.N),
Per =  transf.ilogit(a$beta),
LB = transf.ilogit(a$ci.lb),
UB = transf.ilogit(a$ci.ub))
temp <- rbind(temp, tempPiece)
}
temp = temp %>% filter(!is.na(Intervention))
return(temp)
}
###################################################
# data.names = rep(0, 6)
# data.names[c(1,3,5)] = "Cumulative 26"
# data.names[c(2,4,6)] = "Cumulative 52"
all.summarized = lapply(all, getCohort)
a = all[[1]]
temp <- data.frame(Intervention = NA,
Time= NA,
Pop = NA,
Per = NA,
LB = NA,
UB = NA)
int <-  "IGlarLixi"
time <- 4
for(int in unique(b$Intervention)){
es <- b %>%
filter(Intervention == int) %>%
select(Intervention, `Group N`, n)
es.df <- escalc(measure="PLO",
xi=n,
ni= `Group N`,
data=es)
a <- rma(yi,
vi,
method='DL',
data=es.df,
level=95)
tempPiece <-
data.frame(Intervention = int,
Time= time,
Pop = sum(es.df$Group.N),
Per =  transf.ilogit(a$beta),
LB = transf.ilogit(a$ci.lb),
UB = transf.ilogit(a$ci.ub))
temp <- rbind(temp, tempPiece)
}
b = a
rm(a)
temp <- data.frame(Intervention = NA,
Time= NA,
Pop = NA,
Per = NA,
LB = NA,
UB = NA)
int <-  "IGlarLixi"
time <- 4
for(int in unique(b$Intervention)){
es <- b %>%
filter(Intervention == int) %>%
select(Intervention, `Group N`, n)
es.df <- escalc(measure="PLO",
xi=n,
ni= `Group N`,
data=es)
a <- rma(yi,
vi,
method='DL',
data=es.df,
level=95)
tempPiece <-
data.frame(Intervention = int,
Time= time,
Pop = sum(es.df$Group.N),
Per =  transf.ilogit(a$beta),
LB = transf.ilogit(a$ci.lb),
UB = transf.ilogit(a$ci.ub))
temp <- rbind(temp, tempPiece)
}
View(es.df)
knitr::opts_chunk$set(echo = FALSE)
#library(rbokeh)
library(readxl)
library(dplyr)
library(ggplot2)
library(officer)
library(rvg)
#library(RColorBrewer)
######## Caesar Code  #############################
cumulative26.vomit.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Vomiting V6.xlsx",
sheet = "Cumulative EOS 26 weeks")
cumulative52.vomit.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Vomiting V6.xlsx",
sheet = "Cumulative EOS 52 weeks")
cumulative26.diarrhea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Diarrhea V6.xlsx",
sheet = "Cumulative EOS 26 weeks")
cumulative52.diarrhea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Diarrhea V6.xlsx",
sheet = "Cumulative EOS 52 weeks")
cumulative26.nausea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Nausea V7.xlsx",
sheet = "Cumulative EOS 26 weeks")
cumulative52.nausea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Nausea V7.xlsx",
sheet = "Cumulative EOS 52 weeks")
# Because of NA's vomit and diarrhea excel files' "n" is read in as character
cumulative26.vomit.df$n = as.numeric(cumulative26.vomit.df$n)
cumulative52.vomit.df$n = as.numeric(cumulative52.vomit.df$n)
cumulative26.diarrhea.df$n = as.numeric(cumulative26.diarrhea.df$n)
cumulative52.diarrhea.df$n = as.numeric(cumulative52.diarrhea.df$n)
cumulative26.nausea.df$n = as.numeric(cumulative26.nausea.df$n)
cumulative52.nausea.df$n = as.numeric(cumulative52.nausea.df$n)
###################################################
# week4.df$NewGroup <- ifelse(
#   week4.df$Intervention != "iGlarLixi",
#   "GLP-1 RA",
#   "iGlarLixi")
#
#
# week8.df$NewGroup <- ifelse(
#   week8.df$Intervention != "iGlarLixi",
#   "GLP-1 RA",
#   "iGlarLixi")
#
#
# week12.df$NewGroup <- ifelse(
#   week12.df$Intervention != "iGlarLixi",
#   "GLP-1 RA",
#   "iGlarLixi")
######## Caesar Code  #############################
# create a data cleaning function for all
clean = function(d) {
x = d %>%
filter(!is.na(Intervention)) %>%
select(
Name,
Time,
Intervention,
`Intervention Dose`,
`Pooled Groups`,
Group,
`Group N`,
n) %>% unique()
return(x)
}
all = list(cumulative26.vomit.df, cumulative52.vomit.df,
cumulative26.diarrhea.df, cumulative52.diarrhea.df,
cumulative26.nausea.df, cumulative52.nausea.df)
names = c("Vomit", "Diarrhea", "nausea")
timepoints = c(26, 52)
combine.names = function(names, times) {
out = sapply(names, function(A) sapply(A, function (x, y) paste(x, y), y = timepoints))
return(out)
}
allnames = sapply(names[1], function (x, y) paste(x, y), y = timepoints)
allnames = as.vector(allnames)
# cumulative26.vomit.df = clean(cumulative26.vomit.df)
# cumulative52.vomit.df = clean(cumulative52.vomit.df)
#
# # NOTE: Had to change "Pooled Group" to "Pooled Groups" in the excel file
# # Inconsistency in the variable naming. Please be sure to update data file
# # before running this code
# cumulative26.diarrhea.df = clean(cumulative26.diarrhea.df)
# cumulative52.diarrhea.df = clean(cumulative52.diarrhea.df)
#
# cumulative26.nausea.df = clean(cumulative26.nausea.df)
# cumulative52.nausea.df = clean(cumulative52.nausea.df)
###################################################
all = lapply(all, clean)
######## Caesar Code  #############################
# summarizing function
dt.summary = function(d, string = "Unknown__") {
a = d %>% unique() %>%
filter(!is.na(Intervention)) %>%
group_by(Intervention) %>%
summarise(N = n(),
Events = sum(n),
Pop = sum(`Group N`),
# Calculate weighted standard deviation for error bars
se = sqrt( sum(`Group N`/sum(`Group N`)*(n/`Group N` - sum(n)/sum(`Group N`))^2) ) ) %>%
# upper and lower are errorbar bounds
mutate(Per = Events/Pop, upper = Per + se, lower = Per - se) %>%
mutate(Time = string)
}
# Cohort errorbars function
getCohort <- function(main.df){
library(metafor)
temp <- data.frame(Intervention = NA,
Time= NA,
Pop = NA,
Per = NA,
LB = NA,
UB = NA)
int <-  "IGlarLixi"
time <- 4
for(int in unique(main.df$Intervention)){
es <- main.df %>%
filter(Intervention == int) %>%
select(Intervention, `Group N`, n)
es.df <- escalc(measure="PLO",
xi=n,
ni= `Group N`,
data=es)
if(!is.na(es.df$n) & !is.na(es.df$Group.N)) {
a <- rma(yi,
vi,
method='DL',
data=es.df,
level=95)
} else {
a = list(beta = NA, ci.lb = NA, ci.ub = NA)
a$beta = transf.logit(es$n/es$`Group N`)
}
tempPiece <-
data.frame(Intervention = int,
Time= time,
Pop = sum(es.df$Group.N),
Per =  transf.ilogit(a$beta),
LB = transf.ilogit(a$ci.lb),
UB = transf.ilogit(a$ci.ub))
temp <- rbind(temp, tempPiece)
}
temp = temp %>% filter(!is.na(Intervention))
return(temp)
}
###################################################
# data.names = rep(0, 6)
# data.names[c(1,3,5)] = "Cumulative 26"
# data.names[c(2,4,6)] = "Cumulative 52"
all.summarized = lapply(all, getCohort)
# df.vomit.26
#df.26 %>% DT::datatable()
# Plot functions
plotbar = function(d, xl="Intervention", flip = FALSE) {
# Automatically flip axes if there are too many bars (the labels get messed up when you try to plot more than 8 bars
# vertically in ggplot)
bar_numbers = length(d$Intervention %>% unique())
g = ggplot(data = d,
aes(x=Intervention,
y = Per)) +
geom_bar(stat= "Identity", fill = "#00557F") +
xlab(xl) +
ylab("Rate of Event (%)") +
scale_y_continuous(labels=scales::percent) +
# This complicated-looking line intends to label NA categories as "Missing Data"
# which is inconvenient to implement with ggplot since ggplot would simply remove NA's
# so I pass NA's as zero's first and then label it so the plot won't have an ugly empty space in the middle
# Here y=ifelse(...) is all for adjusting horizontal plots' text positions.
# ggplot text position algorithms are not good when you flip coordinates so I mathematically sovlved it by scaling the position adjustment by the axis scales
geom_text(aes(x = Intervention, y=ifelse(flip == FALSE, 0.005, 0.12*max(upper)),
label=ifelse(is.na(Per), "Missing Data", paste(round(Per*100, 3), "%", sep=""))),
color =  "black",
vjust = ifelse(flip == FALSE, -0.22, 0.2),
hjust = ifelse(flip == FALSE, 0.5, 1.1),
size = 3) +
geom_errorbar(aes(ymin = LB, ymax = UB), width = .2, position = position_dodge(.9), color = "red") +
theme_minimal() +
theme(legend.position="none")
if(flip == TRUE) g+coord_flip()
else g
}
all.plots = lapply(all.summarized, plotbar)
# plotbar(df.vomit.26)
all.plots[[1]]
# Slide Deck function
g = all.plots[[1]]
output.file = "bar_plots.pptx"
addTimepoints = function(mydoc = "bar_plots.pptx", data = all.summarized) {
if (is.data.frame(data)) {
data = list(.data)
} else {
out <- read_pptx()
for (i in data) {
g = plotbar(i)
out <- out %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with_vg(code = print(g))
}
}
print(out, target = paste("output/", output.file, sep = ""))
}
# Run the function and output to pptx
addTimepoints(output.file, all.summarized)
knitr::opts_chunk$set(echo = FALSE)
#library(rbokeh)
library(readxl)
library(dplyr)
library(ggplot2)
library(officer)
library(rvg)
#library(RColorBrewer)
######## Caesar Code  #############################
cumulative26.vomit.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Vomiting V6.xlsx",
sheet = "Cumulative EOS 26 weeks")
cumulative52.vomit.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Vomiting V6.xlsx",
sheet = "Cumulative EOS 52 weeks")
cumulative26.diarrhea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Diarrhea V6.xlsx",
sheet = "Cumulative EOS 26 weeks")
cumulative52.diarrhea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Diarrhea V6.xlsx",
sheet = "Cumulative EOS 52 weeks")
cumulative26.nausea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Nausea V7.xlsx",
sheet = "Cumulative EOS 26 weeks")
cumulative52.nausea.df <- read_excel("input/SNF-Endo-120 Analysis Data Export Nausea V7.xlsx",
sheet = "Cumulative EOS 52 weeks")
# Because of NA's vomit and diarrhea excel files' "n" is read in as character
cumulative26.vomit.df$n = as.numeric(cumulative26.vomit.df$n)
cumulative52.vomit.df$n = as.numeric(cumulative52.vomit.df$n)
cumulative26.diarrhea.df$n = as.numeric(cumulative26.diarrhea.df$n)
cumulative52.diarrhea.df$n = as.numeric(cumulative52.diarrhea.df$n)
cumulative26.nausea.df$n = as.numeric(cumulative26.nausea.df$n)
cumulative52.nausea.df$n = as.numeric(cumulative52.nausea.df$n)
###################################################
# week4.df$NewGroup <- ifelse(
#   week4.df$Intervention != "iGlarLixi",
#   "GLP-1 RA",
#   "iGlarLixi")
#
#
# week8.df$NewGroup <- ifelse(
#   week8.df$Intervention != "iGlarLixi",
#   "GLP-1 RA",
#   "iGlarLixi")
#
#
# week12.df$NewGroup <- ifelse(
#   week12.df$Intervention != "iGlarLixi",
#   "GLP-1 RA",
#   "iGlarLixi")
######## Caesar Code  #############################
# create a data cleaning function for all
clean = function(d) {
x = d %>%
filter(!is.na(Intervention)) %>%
select(
Name,
Time,
Intervention,
`Intervention Dose`,
`Pooled Groups`,
Group,
`Group N`,
n) %>% unique()
return(x)
}
all = list(cumulative26.vomit.df, cumulative52.vomit.df,
cumulative26.diarrhea.df, cumulative52.diarrhea.df,
cumulative26.nausea.df, cumulative52.nausea.df)
names = c("Vomit", "Diarrhea", "nausea")
timepoints = c(26, 52)
combine.names = function(names, times) {
out = sapply(names, function(A) sapply(A, function (x, y) paste(x, y), y = timepoints))
return(out)
}
allnames = sapply(names[1], function (x, y) paste(x, y), y = timepoints)
allnames = as.vector(allnames)
# cumulative26.vomit.df = clean(cumulative26.vomit.df)
# cumulative52.vomit.df = clean(cumulative52.vomit.df)
#
# # NOTE: Had to change "Pooled Group" to "Pooled Groups" in the excel file
# # Inconsistency in the variable naming. Please be sure to update data file
# # before running this code
# cumulative26.diarrhea.df = clean(cumulative26.diarrhea.df)
# cumulative52.diarrhea.df = clean(cumulative52.diarrhea.df)
#
# cumulative26.nausea.df = clean(cumulative26.nausea.df)
# cumulative52.nausea.df = clean(cumulative52.nausea.df)
###################################################
all = lapply(all, clean)
######## Caesar Code  #############################
# summarizing function
dt.summary = function(d, string = "Unknown__") {
a = d %>% unique() %>%
filter(!is.na(Intervention)) %>%
group_by(Intervention) %>%
summarise(N = n(),
Events = sum(n),
Pop = sum(`Group N`),
# Calculate weighted standard deviation for error bars
se = sqrt( sum(`Group N`/sum(`Group N`)*(n/`Group N` - sum(n)/sum(`Group N`))^2) ) ) %>%
# upper and lower are errorbar bounds
mutate(Per = Events/Pop, upper = Per + se, lower = Per - se) %>%
mutate(Time = string)
}
# Cohort errorbars function
getCohort <- function(main.df){
library(metafor)
temp <- data.frame(Intervention = NA,
Time= NA,
Pop = NA,
Per = NA,
LB = NA,
UB = NA)
int <-  "IGlarLixi"
time <- 4
for(int in unique(main.df$Intervention)){
es <- main.df %>%
filter(Intervention == int) %>%
select(Intervention, `Group N`, n)
es.df <- escalc(measure="PLO",
xi=n,
ni= `Group N`,
data=es)
if(nrow(es.df)>1) {
a <- rma(yi,
vi,
method='DL',
data=es.df,
level=95)
} else {
a = list(beta = NA, ci.lb = NA, ci.ub = NA)
a$beta = transf.logit(es$n/es$`Group N`)
}
tempPiece <-
data.frame(Intervention = int,
Time= time,
Pop = sum(es.df$Group.N),
Per =  transf.ilogit(a$beta),
LB = transf.ilogit(a$ci.lb),
UB = transf.ilogit(a$ci.ub))
temp <- rbind(temp, tempPiece)
}
temp = temp %>% filter(!is.na(Intervention))
return(temp)
}
###################################################
# data.names = rep(0, 6)
# data.names[c(1,3,5)] = "Cumulative 26"
# data.names[c(2,4,6)] = "Cumulative 52"
all.summarized = lapply(all, getCohort)
# df.vomit.26
#df.26 %>% DT::datatable()
# Plot functions
plotbar = function(d, xl="Intervention", flip = FALSE) {
# Automatically flip axes if there are too many bars (the labels get messed up when you try to plot more than 8 bars
# vertically in ggplot)
bar_numbers = length(d$Intervention %>% unique())
g = ggplot(data = d,
aes(x=Intervention,
y = Per)) +
geom_bar(stat= "Identity", fill = "#00557F") +
xlab(xl) +
ylab("Rate of Event (%)") +
scale_y_continuous(labels=scales::percent) +
# This complicated-looking line intends to label NA categories as "Missing Data"
# which is inconvenient to implement with ggplot since ggplot would simply remove NA's
# so I pass NA's as zero's first and then label it so the plot won't have an ugly empty space in the middle
# Here y=ifelse(...) is all for adjusting horizontal plots' text positions.
# ggplot text position algorithms are not good when you flip coordinates so I mathematically sovlved it by scaling the position adjustment by the axis scales
geom_text(aes(x = Intervention, y=ifelse(flip == FALSE, 0.005, 0.12*max(upper)),
label=ifelse(is.na(Per), "Missing Data", paste(round(Per*100, 3), "%", sep=""))),
color =  "black",
vjust = ifelse(flip == FALSE, -0.22, 0.2),
hjust = ifelse(flip == FALSE, 0.5, 1.1),
size = 3) +
geom_errorbar(aes(ymin = LB, ymax = UB), width = .2, position = position_dodge(.9), color = "red") +
theme_minimal() +
theme(legend.position="none")
if(flip == TRUE) g+coord_flip()
else g
}
all.plots = lapply(all.summarized, plotbar)
# plotbar(df.vomit.26)
# Slide Deck function
g = all.plots[[1]]
output.file = "bar_plots.pptx"
addTimepoints = function(mydoc = "bar_plots.pptx", data = all.summarized) {
if (is.data.frame(data)) {
data = list(.data)
} else {
out <- read_pptx()
for (i in data) {
g = plotbar(i)
out <- out %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with_vg(code = print(g))
}
}
print(out, target = paste("output/", output.file, sep = ""))
}
# Run the function and output to pptx
addTimepoints(output.file, all.summarized)
read_excel("SNF-Endo-120 Analysis Data Export Vomiting V6.xlsx",
sheet = "Cumulative EOS 26 weeks")
